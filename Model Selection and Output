from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
from xgboost import XGBRFClassifier
from sklearn.metrics import roc_auc_score, confusion_matrix, classification_report, accuracy_score, mean_squared_error, roc_curve
models = {}
from sklearn.linear_model import LogisticRegression
models['Logistic Regression'] = LogisticRegression()

from sklearn.tree import DecisionTreeClassifier
models['Decision Tree'] = DecisionTreeClassifier()

from sklearn.ensemble import GradientBoostingClassifier
models['Gradient Boosting'] = GradientBoostingClassifier()

from sklearn.ensemble import RandomForestClassifier
models['Random Forest'] = RandomForestClassifier()

from xgboost import XGBClassifier
models['XGBoost'] = XGBClassifier()
from sklearn.metrics import accuracy_score, precision_score, recall_score

accuracy, precision, recall = {}, {}, {}

for keys in models.keys():
  models[keys].fit(X_train,Y_train)

  predictions = models[keys].predict(X_val)

  #calculating metrics

  accuracy[keys] = accuracy_score(Y_val,predictions)
  precision[keys] = precision_score(Y_val,predictions)
  recall[keys] = recall_score(Y_val,predictions)
  Y_predict = models[keys].predict(X_val)
  auc = roc_auc_score(Y_val,Y_predict)
  print('Classification Report: ',keys)
  print(classification_report(Y_val,predictions))
  false_positive_rate, true_positive_rate, thresholds = roc_curve(Y_val, Y_predict)
  print('ROC_AUC_SCORE is: ', roc_auc_score(Y_val,predictions))

   #plotting of metrics: fpr,tpr
plt.plot(false_positive_rate, true_positive_rate)
plt.xlabel('FPR')
plt.ylabel('TPR')
plt.title('ROC Curve')
plt.show()
sns.heatmap(confusion_matrix(Y_val, predictions), fmt='d', annot=True)

import pandas as pd
df_model = pd.DataFrame(index = models.keys(), columns = ['Accuracy', 'Precision', 'Recall'])
df_model['Accuracy'] = accuracy.values()
df_model['Precision'] = precision.values()
df_model['Recall'] = recall.values()
df_model

#Plotting final results

import matplotlib.pyplot as plt

df_model.plot(kind='bar', figsize=(10, 6))

plt.title('Model Performance Comparison')
plt.xlabel('Models')
plt.ylabel('Scores')

plt.xticks(rotation=45)

plt.legend(title='Metrics')
plt.tight_layout()
plt.show()
